1.mybatis中的#和$的区别：
	#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号（调用PreparedStatement的set方法来赋值是预编译的）
	$将传入的数据直接显示生成在sql中
	使用#可以很大程度上防止sql注入
	但是如果使用在order by 中就需要使用 $.
	
2.List接口有三个实现类：
	LinkedList:基于链表实现，链表内存是散列的，增删快，查找慢；
	ArrayList:基于数组实现，非线程安全，效率高，增删慢，查找快；
	Vector:基于数组实现，线程安全，效率低，增删慢，查找慢；
	jdk1.8 线程安全的ArrayList :Collections.synchronizedList(new ArrayList<String>());
	jdk1.8juc包：不加锁的线程安全list:CopyOnWriteArrayList<String> copyOnWriteArrayList = new CopyOnWriteArrayList<String>();
	
3.Map接口有四个实现类：
	HashMap: 基于 hash 表的 Map 接口实现，非线程安全，高效，支持 null 值和 null键；
	HashTable： 线程安全，低效，不支持 null 值和 null 键；
	LinkedHashMap： 是 HashMap 的一个子类，保存了记录的插入顺序；
	SortMap: 接口 TreeMap，能够把它保存的记录根据键排序，默认是键值的升序排序
	线程安全的map: Collections.synchronizedMap(new HashMap<String, String>());
	jdk1.8juc包：ConcurrentHashMap<String, String> concurrentHashMap = new ConcurrentHashMap<String, String>();
	
4.Set接口有两个实现类：
	HashSet:底层是由 Hash Map 实现，不允许集合中有重复的值，使用该方式时需要重写 equals()和 hash Code()方法；
	LinkedHashSet:继承于 HashSet，同时又基于 LinkedHashMap 来进行实现，底层使用的是 LinkedHashMap
	线程安全的set: Collections.synchronizedSet(new HashSet<String>());
    jdk1.8juc包：CopyOnWriteArraySet<String> copyOnWriteArraySet = new CopyOnWriteArraySet<String>();
	
5.set、list、map 的区别与联系：
	List和Set是存储单列数据的集合，Map是存储键值对这样的双列数据的集合；
    List中存储的数据是有顺序的，并且值允许重复；
	Map中存储的数据是无序的，它的键是不允许重复的，但是值是允许重复的；
	Set中存储的数据是无顺序的，并且不允许重复；
	
6.map的底层原理：
    HashMap在底层将key-value当成一个整体处理，保存在Node数组对象中（jdk1.8以前是entity数组）
	存储的时候会根据key的hash算法来决定保存的数组位置，在根据equals方法来决定在该数组位置上的
	链表的位置（jdk1.8当链表长度大于一定阈值时时，链表转换为红黑树，减少链表的查询时间）
	当需要取出一个node时，也会根据key的hash值找到其在数组中的存储位置，再根据equals方法
	从该位置的链表上或红黑树上取出该Node


7.jvm:
	JVM内存是如何划分的？
		类加载子系统、运行时数据区、执行引擎、垃圾回收器

		运行时数据区：方法区、Java堆（在虚拟机启动的时候建立）、Java栈、本地方法区、执行引擎

		java 堆在虚拟机启动的时候建立的

		垃圾回收系统：垃圾回收器可以对方法区、java堆、和直接内存进行回收

		java堆  jvm堆  内存分代：新生代、老年代、永久代

	谈谈垃圾回收机制？为什么引用计数器判定对象是否回收不可行？知道哪些垃圾回收算法？

	引用计数算法、复制算法、标记清除算法、标记整理

	新生代回收期
	 serrial(串行收集器)、parNew（并行收集器）、parrllel scavenge（吞吐量）
	 
	老年代回收期
	cms（并发收集器）、serrialOld、parrllelOld

	老年代回收期、新生代回收期  G1
   
   线程数据共享区域（包括：Java堆内存，Java方法区）
    Java堆内存:
		Java堆是Java虚拟机所管理的内存中最大的一块，此内存区域就是存放对象实例
		Java堆是垃圾收集器管理的主要区域
		从内存回收的角度来看可以细分为：新生代和老年代；
		在实现时，既可以实现成固定的大小，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx设置最大内存和-Xms设置初始内存）

    Java 方法区:
		方法去又叫静态区：用于存储已被虚拟机加载的类信息，常量池、静态变量.
    java 栈:
		执行代码的内存区域,
		栈里存放了编译期可知的各种基本数据类型,对象引用和指向了一条字节码指令的地址
		每个方法在执行的同时都会创建一个栈帧用于存储局部变量表，操作数栈、动态链接、方法出口等信息
		
		
		
7.oracle 数据库：
	7.1 隔离级别： （顺序由上到下依次升高）
		Read uncommitted 读未提交（出现脏读）、
		Read committed 读提交（造成不可重复读）、
		Repeatable read 重复读（避免了不可重复读，但还有可能出现幻读）、
		Serializable 序列化（同时代价也花费最高，性能很低，一般很少使用，在该级别下，
	                     事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读）
    7.2 默认的隔离级别？ Read committed 读提交
	7.3 如何创建唯一索引？
	    CREATE INDEX 索引名 on 表名(列名 DESC)
	7.4 oracle索引失效情况:
		1．隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.
		 由于表的字段tu_mdn定义为varchar2(20),但在查询时把该字段作为number类型以where条件传给Oracle,这样会导致索引失效.
		 错误的例子：select * from test where tu_mdn=13333333333;
		 正确的例子：select * from test where tu_mdn='13333333333';
		2. 对索引列进行运算导致索引失效,我所指的对索引列进行运算包括(+，-，*，/，! 等)
		 错误的例子：select * from test where id-1=9;
		 正确的例子：select * from test where id=10;
		3. 使用Oracle内部函数导致索引失效.对于这样情况应当创建基于函数的索引.
		  错误的例子：select * from test where round(id)=10; 说明，此时id的索引已经不起作用了
		  正确的例子：首先建立函数索引，create index test_id_fbi_idx on test(round(id));然后 select * from test where  round(id)=10; 这时函数索引起作用了
		4. 以下使用会使索引失效，应避免使用；
		 a. 使用 <> 、not in 、not exist、!=
		 b. like "%_" 百分号在前（可采用在建立索引时用reverse(columnName)这种方法处理）
			   c. 单独引用复合索引里非第一位置的索引列.应总是使用索引的第一个列，如果索引是建立在多个列上, 只有在它的第一个 列被where子句引用时，优化器才会选择使用该索引。
		 d. 字符型字段为数字时在where条件里不添加引号.
		 e. 当变量采用的是times变量，而表的字段采用的是date变量时.或相反情况。
		5. 使用 IS NULL 和 IS NOT NULL
	7.5 创建Oracle索引的一些注意事项:	
	  不需要为比较小的表创建索引、大的表查询较少的也不需要创建索引
	  创建在重复内容较少的列
	  如果存在null和非null混合的情况，如果要经常查非空的数据就创建索引
	  并不是一个表创建越多的索引越好，会影响增加、修改、删除的效率
	  在经常需要排序的列上创建索引
	  在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度
	7.7 创建索引的优点：
		通过创建唯一性索引，可以保证Oracle数据库表中每一行数据的唯一性。
		可以大大加快数据的检索速度，这也是创建索引的最主要的原因。
		可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。
	7.8索引分类：
		1. b-tree索引（create index 索引名 on 表名(列名);）
			Oracle数据库中最常见的索引类型是b-tree索引，也就是B-树索引，以其同名的计算科学结构命名。CREATE 
			INDEX语句时，默认就是在创建b-tree索引。没有特别规定可用于任何情况。
		2. 位图索引(bitmap index) （create bitmap index 索引名 on 表名(列名);）
			位图索引特定于该列只有几个枚举值的情况，比如性别字段，标示字段比如只有0和1的情况。
		3. 基于函数的索引（CREATE INDEX P_IDX ON TABLE1(SUBSTR(COLUMN1,0,5));）SUBSTR函数
			比如经常对某个字段做查询的时候是带函数操作的，那么此时建一个函数索引就有价值了。
		4. 分区索引和全局索引
			这2个是用于分区表的时候。前者是分区内索引，后者是全表索引
		5. 反向索引（REVERSE）
			这个索引不常见，但是特定情况特别有效，比如一个varchar(5)位字段(员工编号)含值
			（10001,10002,10033,10005,10016..）
			这种情况默认索引分布过于密集，不能利用好服务器的并行
			但是反向之后10001,20001,33001,50001,61001就有了一个很好的分布，能高效的利用好并行运算。
		6.HASH索引
			HASH索引可能是访问数据库中数据的最快方法，但它也有自身的缺点。集群键上不同值的数目必须在创建HASH集群之前就要知道。需要在创建HASH集群的时候指定这个值。使用HASH索引必须要使用HASH集群。
	7.9 sql优化：
	
Mysql myisam（这种索引方式称为非聚集索引）与innodb（这种索引方式称为聚集索引）的不同（都属于表级别的）

		InnoDB支持事物，而MyISAM不支持事物 
		InnoDB支持行级锁，而MyISAM支持表级锁 
		InnoDB支持MVCC, 而MyISAM不支持 
		InnoDB支持外键，而MyISAM不支持 
		InnoDB不支持全文索引，而MyISAM支持。
	
	MyISAM要点： 索引文件上不记录数据，只有数据储存地址。MyISAM的索引文件和数据文件分离，查询上先查索引文件，再查数据文件。称为非聚集索引。
    InnoDB要点：索引文件就是一个B+树结构的索引，这个索引的叶子节点储存数据，成为聚集索引。若有其他索引，则储存主键索引的值，然后再去主键索引查找真正的数据。

mysql 数据存储实际上是从电脑的磁盘读取数据数据加载到内存中，数据库的局部性原理（简要检索的数据邻近的也加载到内存）还有页的概念

8.mysql与oralce 的区别与联系：

	8.1.对事务的提交
		MySQL默认是自动提交，而Oracle默认不自动提交，需要用户手动提交，需要在写commit;指令或者点击commit按钮

	8.2.分页查询
		MySQL是直接在SQL语句中写"select... from ...where...limit  x, y",有limit就可以实现分页;而Oracle则是需要用到伪列ROWNUM和嵌套查询

	8.3.列类型区别
	oracle：
	 可变长度varchar2、浮点型number，小数浮点型number(m,n)，可变二进制数据raw，
		大对象类型(存储无结构数据，最大4G)lob、clob
	mysql：
	  可变长度varchar、浮点型float、double、小数decimal(m,n),可变二进制数据blob

	8.4.序列(mysql没有，因为mysql有自增AUTO_INCREMENT，而oracle需要新增序列seq然后再用seq.nextval来记录id)

	8.5.全外连接(mysql没有) oracle：full outer join

	8.6. 删除表（异）
	MySQL:
	  drop table if exists emp；
	Oracle:
	  drop table emp

	8.7.添加、修改、删除、列（异）
	mysql:
	 A. alter table 表名 add column 字段 数据类型;
	 B. alter table 表名 add column 字段1 数据类型, add column 字段2 数据类型;
	注：其中关键字column可有可无。
	oracle：
	A. alter table 表名 add 字段 数据类型;
	B. alter table 表名 add (字段 数据类型);
	C. alter table 表名 add (字段1 数据类型, 字段2 数据类型); 
	注：对于A，只有添加单列的时候才可使用，对于添加多列时需要使用C，不能像MySQL那样重复使用add column关键字。

	8.8.索引：（创建索引相同、删除索引不同、查询不同）
	在整个数据库内，MySQL的索引可以同名，也就是说MySQL的索引是表级别的；但是Oracle索引不可以同名，
	也就是说Oracle的索引是数据库级别的。

	8.9.空字符串问题
	Oracle中空字符串''就是null（也就是说，只有null，没有空字符），而MySQL是区分null和''的

	8.10.事务隔离级别 

	MySQL是读提交的隔离级别，而Oracle是重复读的隔离级别，同时二者都支持serializable串行化事务隔离级别，
	可以实现最高级别的读一致性。	
		
	8.11.对事务的支持
		MySQL在innodb存储引擎的行级锁的情况下才可支持事务，而Oracle则完全支持事务
		
	8.12.保存数据的持久性
		MySQL是在数据库更新或者重启，则会丢失数据，Oracle把提交的sql操作线写入了在线联机日志文件中，
		保持到了磁盘上，可以随时恢复	
		
	8.13.逻辑备份
		MySQL逻辑备份时要锁定数据，才能保证备份的数据是一致的，影响业务正常的dml使用,Oracle逻辑备份时不锁定数据，
		且备份的数据是一致	

9.如何创建线程：(Java可以用四种方式来创建线程：)
	  继承Thread类创建线程 
	  实现Runnable接口创建线程 
	  使用Callable创建线程（Callable可以有返回值）
	  使用线程池例如用Executor(java.util.concurrent.Executors)

	为何使用线程池：（线程池的优势：线程复用、控制最大并发数、管理线程）
	  new Thread的弊端
		线程生命周期的开销非常高。创建线程都会需要时间，延迟处理的请求，并且需要JVM和操作系统提供一些辅助操作。
		资源消耗。活跃的线程会消耗系统资源，尤其是内存。如果可运行的线程数量多于可用处理器的数量，那么有些线程将会闲置。
		  大量空闲的线程会占用许多内存，给GC带来压力，而且大量线程在竞争CPU资源时会产生其他的性能开销。
		稳定性。在可创建线程的数量上存在一个限制，这个限制受多个因素的制约，包括JVM的启动参数、
		  Thread构造函数中请求栈的大小以及底层操作系统的限制。如果破坏了这些限制，很可能抛出　　outOfMemoryError异常。
	　　
	总结：也就是说在一定的范围内增加线程的数量可以提高系统的吞吐率，但是如果超出了这个范围，再创建更多的线程只会降低程序的执行效率甚至导致系统的崩溃。

	如何创建线程池？
		创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待
		 ExecutorService fixedThreadPool = Executors.newFixedThreadPool(5);
		创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程
		ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
		创建一个定长线程池，支持定时及周期性任务执行
		ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);
		创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行
		ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
		总结：以上创建线程池可能会造成内存溢出！
		正确创建线程应该自己指定参数，避免使用默认参数
		new ThreadPoolExecutor(自定义参数);
	
	线程池常用参数
		corePoolSize：核心线程数量（常驻线程数），会一直存在，除非allowCoreThreadTimeOut设置为true
		maximumPoolSize：线程池允许的最大线程池数量
		keepAliveTime：线程数量超过corePoolSize，空闲线程的最大超时时间
		unit：超时时间的单位
		workQueue：工作队列，保存未执行的Runnable 任务
		threadFactory：创建线程的工厂类(默认)
		handler：当线程已满，工作队列也满了的时候，会被调用。被用来实现各种拒绝策略。
    线程池的拒绝策略：
		
		丢弃任务，并抛出拒绝执行 RejectedExecutionException 异常信息。线程池默认的拒绝策略。必须处理好抛出的异常，否则会打断当前的执行流程，影响后续的任务执行。
		new ThreadPoolExecutor.AbortPolicy();
		当触发拒绝策略，只要线程池没有关闭的话，则使用调用线程直接运行任务。一般并发比较小，性能要求不高，不允许失败。
		但是，由于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能效率上必然的损失较大
		new ThreadPoolExecutor.CallerRunsPolicy();
		当触发拒绝策略，只要线程池没有关闭的话，丢弃阻塞队列 workQueue 中最老的一个任务，并将新任务加入
		new ThreadPoolExecutor.DiscardOldestPolicy();
		直接丢弃，其他啥都没有
		new ThreadPoolExecutor.DiscardPolicy();
	
	线程池都有哪几种工作队列
		ArrayBlockingQueue
			是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。
		LinkedBlockingQueue
			一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列
		SynchronousQueue
			一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，
			静态工厂方法Executors.newCachedThreadPool使用了这个队列。
		PriorityBlockingQueue
			一个具有优先级的无限阻塞队列。
			
	lock  unlock 与synchronized  区别 ？
		lock是显式的（是java写的控制锁的代码），synchronized是隐式的（是托管给JVM执行的）  性能上差不多
		Lock可以使用Condition进行线程之间的调度，Synchronized则使用Object对象本身的notify, wait, notityAll调度机制
		Condition是Java5以后出现的机制，它有更好的灵活性，而且在一个对象里面可以有多个Condition（即对象监视器),则线程可以注册在不同的Condition，从而可以有选择性的调度线程，更加灵活。
		Synchronized就相当于整个对象只有一个单一的Condition（即该对象本身）所有的线程都注册在它身上，线程调度的时候之后调度所有得注册线程，没有选择权，会出现相当大的问题 。
		lock 等待的方法是await()sy是wait(),lock 唤醒的方法可以是signal()sy 是notify()，使用signal()实现精确唤醒  sy是通过线程的优先级来处理
	
	实现线程同步的几种方式总结：
		synchronized，lock()、unlock(){await()、signal()}
		通过一个阻塞队列
		ArrayBlockingQueue queue = new ArrayBlockingQueue<Integer>(64);
		queue.put(i);生产消息
		int num = (int) queue.take(); 消费
		线程池的回调函数
		
	分布式锁？

Spring Ioc （是什么？有什么好处？）

	依赖注入（Dependecy Injection）和控制反转（Inversion of Control）是同一个概念，具体的讲：当某个角色需要另外一个角色协助的时候，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在spring中创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由spring来完成，然后注入调用者 
	因此也称为依赖注入。 
	spring以动态灵活的方式来管理对象 ， 注入的两种方式，设置注入和构造注入。 
	设置注入的优点：直观，自然 
	构造注入的优点：可以在构造器中决定依赖关系的顺序。
	
	好处是：
	 1.资源集中管理，实现资源的可配置和易管理
	 2.解耦
	 
Spring Aop （是什么？有什么好处？应用场景？）

spring 事务

	Spring的事务也就是数据库的事务，符合ACID（事务特性：原子性、一致性、隔离性、持久性）标准，
	也具有标准的事务隔离级别（隔离级别：读未提交、读提交、可重复读、序列化）。
	
	但是Srping事务也有自己的特点，也就是事物的传播机制。
	
	所谓的传播机制，也就是事务在多个方法的调用中是如何传递的，是重新创建事务还是使用父方法的事务？
	父方法的回滚对子方法的事务是否有影响？都是可以通过事务传播机制来决定的。
	
事务传播机制的类型：
 支持当前事务：
	PROPAGATION_REQUIRED (默认)
		支持当前事务，如果当前没有事务，则新建事务
		如果当前存在事务，则加入当前事务，合并成一个事务
	SUPPORTS
		如果当前存在事务，则加入事务
		如果当前不存在事务，则以非事务方式运行，这个和不写没区别
	MANDATORY
		如果当前存在事务，则运行在当前事务中
		如果当前无事务，则抛出异常，也即父级方法必须有事务
 不支持当前事务：		
	REQUIRES_NEW
		新建事务，如果当前存在事务，则把当前事务挂起
		这个方法会独立提交事务，不受调用者的事务影响，父级异常，它也是正常提交
	NOT_SUPPORTED
		以非事务方式运行
		如果当前存在事务，则把当前事务挂起
	NEVER
		以非事务方式运行，如果当前存在事务，则抛出异常，即父级方法必须无事务
 嵌套事务：	
	NESTED
		如果当前存在事务，它将会成为父级事务的一个子事务，方法结束后并没有提交，只有等父事务结束才提交
		如果当前没有事务，则新建事务
		如果它异常，父级可以捕获它的异常而不进行回滚，正常提交
		但如果父级异常，它必然回滚，这就是和 REQUIRES_NEW 的区别

spring 动态代理：



Spring Bean的生命周期：

	1.通过构造器或者工厂方法创建bean的实例
	2.为bean的属性设置值和对其他bean的引用
	3.将bean的实例传递给bean的后置处理器BeanPostProcessor的postProcessBeforeInitialization方法
	4.调用bean的初始化方法
	5.调用bean的后置处理器BeanPostProcessor的postProcessAfterInitialization方法
	6.使用bean容器
	7.调用bean的销毁方法

SpringMVC 运行流程：
   第一步：发起请求到前端控制器(DispatcherServlet)
   
   第二步：前端控制器请求HandlerMapping查找 Handler （可以根据xml配置、注解进行查找）
   
   第三步：处理器映射器HandlerMapping向前端控制器返回Handler，HandlerMapping会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象，多个HandlerInterceptor拦截器对象），通过这种策略模式，很容易添加新的映射策略
   
   第四步：前端控制器调用处理器适配器去执行Handler
   
   第五步：处理器适配器HandlerAdapter将会根据适配的结果去执行Handler
   
   第六步：Handler执行完成给适配器返回ModelAndView
   
   第七步：处理器适配器向前端控制器返回ModelAndView （ModelAndView是springmvc框架的一个底层对象，包括 Model和view）
   
   第八步：前端控制器请求视图解析器去进行视图解析 （根据逻辑视图名解析成真正的视图(jsp)），通过这种策略很容易更换其他视图技术，只需要更改视图解析器即可
   
   第九步：视图解析器向前端控制器返回View
   
   第十步：前端控制器进行视图渲染 （视图渲染将模型数据(在ModelAndView对象中)填充到request域）
   
   第十一步：前端控制器向用户响应结果
   
Spring Data Jpa(是什么？干什么用？解决了什么问题？)

Spring Boot (为什么使用？带来了什么好处?如何实现自动注入？)

	spring boot好处
	回顾我们之前的 SSM 项目，搭建过程还是比较繁琐的，需要：

	1）配置 web.xml，加载 spring 和 spring mvc

	2）配置数据库连接、配置日志文件

	3）配置加载配置文件的读取，开启注解

	4）配置mapper文件

	而使用 Spring Boot 来开发项目则只需要非常少的几个配置就可以搭建起来一个 Web 项目，

	并且利用 IDEA或sts 可以自动生成生成。
	如何实现自动注入：
	自动配置类主要作用是SpringBoot的配置核心，它会写在MEAT-INF/spring.factories中，告知SpringBoot在启动时去读取该类并根据该类的规则进行配置
	@ConditionalOnBean：当容器里有指定的Bean为true
	@ConditionalOnClass：当类路径下有指定的类为true
	@ConditionalOnMissingBean：当容器里没有指定的Bean为true
	@ConditionalOnProperty：指定的数据是否有指定的值

Spring Cloud (简单介绍一下？注册中心、服务提供者、服务消费者、断路器、网关解决了什么问题?)

	网关解决的问题：破坏了服务无状态的特点、无法直接复用既有接口
	起到了过滤请求请求的转发（路由）作用，类似于过滤器

dubbo(简单介绍一下？与Spring Colud 比较的优缺点？有没有除了zookeeper之外的注册中心？)
	通过服务端暴漏服务（dubbo的@service注解+@Component），客户端通过远程接口调用（通过@Reference注入）
	依赖公共的接口。zookeeper是官方推荐的注册中心(Multicast、Zookeeper、Redis、Simple)

dubbo与Spring Colud 比较的优缺点:

	dubbo由于是二进制的传输，占用带宽会更少
	springCloud是http协议传输，带宽会比较多，同时使用http协议一般会使用JSON报文，消耗会更大
	dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决
	springcloud的接口协议约定比较自由且松散，需要有强有力的行政措施来限制接口无序升级
	dubbo的注册中心可以选择zk,redis等多种，springcloud的注册中心只能用eureka或者自研

zookeeper（应用场景？）
	1.作为dubbo的注册中心
	2.统一命名服务
	3.配置管理
	4.集群管理
	
	
redis支持的数据类型：
		String，list，set，zset，hash
redis 优缺点：
	优点：
		速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)
		支持丰富数据类型，支持string，list，set，zset，hash
		支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行
		丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除	
	缺点:
		缓存和数据库双写一致性问题
		缓存雪崩问题
		缓存击穿问题
		缓存的并发竞争问题

Radis (如何持久化？radis哨兵模式的选举机制是什么？雪崩击穿是什么如何避免？)

哨兵模式：通过投票选举的的方式选择master(新创建配置sentinel.cof配置文件监控master节点)

1.什么是缓存穿透
	一般的缓存系统，都是按照key值去缓存查询，如果不存在对应的value，就应该去DB中查找 。这个时候，如果请求的并发量很大，就会对后端的DB系统造成很大的压力。这就叫做缓存穿透
	造成的原因
	1.业务自身代码或数据出现问题；2.一些恶意攻击、爬虫造成大量空的命中，此时会对数据库造成很大压力。

	解决方法
	1.设置布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，
	从避免了对底层存储系统的查询压力。
	2. 如果一个查询返回的数据为空，不管是数据不存在还是系统故障，我们仍然把这个结果进行缓存，但是它的过期时间会很短
	最长不超过5分钟。

1.什么是雪崩

	因为缓存层承载了大量的请求，有效的保护了存储层，但是如果缓存由于某些原因，整体不能够提供服务，于是所有的请求，就会到达存储层，存储层的调用量就会暴增，造成存储层也会挂掉的情况。
	缓存雪崩的英文解释是奔逃的野牛，指的是缓存层当掉之后，并发流量会像奔腾的野牛一样，大量后端存储。
	存在这种问题的一个场景是：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，大量数据会去直接访问DB，此时给DB很大的压力
	2.解决方法

	（1）设置redis集群和DB集群的高可用，如果redis出现宕机情况，可以立即由别的机器顶替上来。这样可以防止一部分的风险。

	（2）使用互斥锁

	在缓存失效后，通过加锁或者队列来控制读和写数据库的线程数量。比如：对某个key只允许一个线程查询数据和写缓存，其他线程等待。单机的话，可以使用synchronized或者lock来解决，如果是分布式环境，可以是用redis的setnx命令来解决。

	（3）不同的key,可以设置不同的过期时间，让缓存失效的时间点不一致，尽量达到平均分布。

	（4）永远不过期

	redis中设置永久不过期，这样就保证了，不会出现热点问题，也就是物理上不过期。

	（5）资源保护

	使用netflix的hystrix，可以做各种资源的线程池隔离，从而保护主线程池。



消息中间件：rebbitmq

RabbitMq(有几种工作模式？与 kafka 的区别？)

有几种工作模式？
	简单模式：一个生产者，一个消费者
		(简单模式存在的弊端：耦合性高 如果有多个消费者消费队列中的消息，就不行了
		队列名称改了 要同时变更)
	work模式：一个生产者，多个消费者，每个消费者获取到的消息唯一。
		（解决的问题：生产者产生消息快，容易产生消息积压）

	订阅模式：一个生产者发送的消息会被多个消费者获取。
		（解决的问题：一条消息只能被一个消费者消费）

	路由模式：发送消息到交换机并且要指定路由key ，消费者将队列绑定到交换机时需要指定路由key

	topic模式：将路由键和某模式进行匹配，此时队列需要绑定在一个模式上，“#”匹配一个词或多个词，“*”只匹配一个词。


RabbitMq解决了什么问题？：异步处理、应用解耦、流量削峰、日志 处理

jdk1.8前后有哪些区别？
	lamebd表达式、线程池的支持、stream流式计算、对集合类进行优化、函数式编程

docker （是什么？干什么用？常用命令？）

k8s (是什么？)

-------------------------------------------------------------------------------------------------------------------------------

linux获取前20行：

  tail -n 1000：显示最后1000行

  tail -n +1000：从1000行开始显示，显示1000行以后的

  head -n 1000：显示前面1000行
  
  sed -n '5,10p' filename 这样你就可以只查看文件的第5行到第10行。

linux 解压命令

解压war包 
  
  unzip -n abfx.war -d abfx/

　tar –xvf file.tar //解压 tar包

　tar -xzvf file.tar.gz //解压tar.gz

　tar -xjvf file.tar.bz2 //解压 tar.bz2

　tar –xZvf file.tar.Z //解压tar.Z

　unrar e file.rar //解压rar

　unzip file.zip //解压zip

linux 压缩

　　tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg

　　tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz

　　tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2

　　tar –cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z

　　rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux

　　zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux

linux vim 模式下显示行号
显示行号： set  nu   关闭显示行号： set nonu

创建文件：touch test.txt
创建目录：mkdir test/a/    mkdir -p test/a/b/c

查看进程：
ps -ef|grep  redis   查看到端口号

vim 命令行模式操作
 :w  保存
 :q  没有进行修改退出
 :q! 修改了，不保存，强制退出
 :wq 保存并退出
 :wq! 强制保存并退出


关闭进程

kill - 9  进程号  

导出文件 sz  上传文件  rz

linux 安装tomcat（外部不能访问的问题）无需配置环境变量
	测试Tomcat:
	打开防火墙,使外部能访问
	# /sbin/iptables -I INPUT -p tcp --dport 8087 -j ACCEPT
	# service iptables save
	# service iptables restart
	
	或直接修改文件/etc/sysconfig/iptables.
	# vi /etc/sysconfig/iptables
	-A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
	# service iptables restart
Linux  配置环境变量/etc/profile
-----------------------------------------------------------------------------------------------------------------------------------------------
单点登录
进度条

docker 三要素：
镜像
docker镜像（image）就是一个 只读 的模板。 镜像可以用来创建docker容器，一个镜像可以创建很多容器 。

容器
docker利用容器（container）独立运行的一个或者一组应用。容器是利用镜像创建的运行实例（相对于Python中的类和对象的概念）。

它可以被启动、开始、停止、删除。每个容器都是互相隔离的，保证安全的平台。

可以把容器看做是一个简易版的Linux环境 (包括root用户名权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。

容器的定义和镜像几乎是一模一样的，也是一堆层的统一视角， 唯一区别的是容器的最上面那一次是可读写的。

仓库
仓库（repository）是集中存放镜像文件的场所 。

仓库(repository)和仓库注册服务器（registry）是有区别的。仓库注册服务器上往往放着很多个仓库，每个仓库中又包含了很多个镜像，每个镜像有不同的标签（tag）。

仓库分为公开仓库（public）和私有仓库（private）两种形式。











	
	














